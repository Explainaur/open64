/*
  Copyright (C) 2021 Xcalibyte (Shenzhen) Limited.

  This program is free software; you can redistribute it and/or modify it
  under the terms of version 2 of the GNU General Public License as
  published by the Free Software Foundation.

  This program is distributed in the hope that it would be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  Further, this software is distributed without any warranty that it is
  free of the rightful claim of any third person regarding infringement
  or the like.  Any license provided herein, whether implied or
  otherwise, applies only to this software file.  Patent licenses, if
  any, provided herein do not apply to combinations of this program with
  other software, or any other product whatsoever.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write the Free Software Foundation, Inc., 59
  Temple Place - Suite 330, Boston MA 02111-1307, USA.

  http://www.xcalibyte.com

  For more information, see:
  http://github.com/open64-compiler/open64
  http://gitee.com/open64-compiler/open64

*/


/* auto-generated intrinsics for c++ std_map intrinsic. 2021-10-26 11:56:53 */

  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map() */
  if (strcmp("_ZNSt3__13mapC1Ev", fname) == 0) { return INTRN__ZNSt3__13mapC1Ev; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(const std::__1::map::key_compare & __comp) */
  if (strcmp("_ZNSt3__13mapC1ERKT1_", fname) == 0) { return INTRN__ZNSt3__13mapC1ERKT1_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(const std::__1::map::key_compare & __comp, const std::__1::map::allocator_type & __a) */
  if (strcmp("_ZNSt3__13mapC1ERKT1_RKT2_", fname) == 0) { return INTRN__ZNSt3__13mapC1ERKT1_RKT2_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map<typename _InputIterator>(_InputIterator __f, _InputIterator __l, const std::__1::map::key_compare & __comp) */
  if (strcmp("_ZNSt3__13mapC1ETL0__S1_RKT1_", fname) == 0) { return INTRN__ZNSt3__13mapC1ETL0__S1_RKT1_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map<typename _InputIterator>(_InputIterator __f, _InputIterator __l, const std::__1::map::key_compare & __comp, const std::__1::map::allocator_type & __a) */
  if (strcmp("_ZNSt3__13mapC1ETL0__S1_RKT1_RKT2_", fname) == 0) { return INTRN__ZNSt3__13mapC1ETL0__S1_RKT1_RKT2_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map<typename _InputIterator>(_InputIterator __f, _InputIterator __l, const std::__1::map::allocator_type & __a) */
  if (strcmp("_ZNSt3__13mapC1ETL0__S1_RKT2_", fname) == 0) { return INTRN__ZNSt3__13mapC1ETL0__S1_RKT2_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(const map<_Key, _Tp, _Compare, _Allocator> & __m) */
  if (strcmp("_ZNSt3__13mapC1ERKNS_3mapIT_T0_T1_T2_EE", fname) == 0) { return INTRN__ZNSt3__13mapC1ERKNS_3mapIT_T0_T1_T2_EE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(map<_Key, _Tp, _Compare, _Allocator> && __m) */
  if (strcmp("_ZNSt3__13mapC1EONS_3mapIT_T0_T1_T2_EE", fname) == 0) { return INTRN__ZNSt3__13mapC1EONS_3mapIT_T0_T1_T2_EE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(map<_Key, _Tp, _Compare, _Allocator> && __m, const std::__1::map::allocator_type & __a) */
  if (strcmp("_ZNSt3__13mapC1EONS_3mapIT_T0_T1_T2_EERKS5_", fname) == 0) { return INTRN__ZNSt3__13mapC1EONS_3mapIT_T0_T1_T2_EERKS5_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(initializer_list<std::__1::map::value_type> __il, const std::__1::map::key_compare & __comp) */
  if (strcmp("_ZNSt3__13mapC1ESt16initializer_listINS_4pairIKT_T0_EEERKT1_", fname) == 0) { return INTRN__ZNSt3__13mapC1ESt16initializer_listINS_4pairIKT_T0_EEERKT1_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(initializer_list<std::__1::map::value_type> __il, const std::__1::map::key_compare & __comp, const std::__1::map::allocator_type & __a) */
  if (strcmp("_ZNSt3__13mapC1ESt16initializer_listINS_4pairIKT_T0_EEERKT1_RKT2_", fname) == 0) { return INTRN__ZNSt3__13mapC1ESt16initializer_listINS_4pairIKT_T0_EEERKT1_RKT2_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(initializer_list<std::__1::map::value_type> __il, const std::__1::map::allocator_type & __a) */
  if (strcmp("_ZNSt3__13mapC1ESt16initializer_listINS_4pairIKT_T0_EEERKT2_", fname) == 0) { return INTRN__ZNSt3__13mapC1ESt16initializer_listINS_4pairIKT_T0_EEERKT2_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(const std::__1::map::allocator_type & __a) */
  if (strcmp("_ZNSt3__13mapC1ERKT2_", fname) == 0) { return INTRN__ZNSt3__13mapC1ERKT2_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::map(const map<_Key, _Tp, _Compare, _Allocator> & __m, const std::__1::map::allocator_type & __a) */
  if (strcmp("_ZNSt3__13mapC1ERKNS_3mapIT_T0_T1_T2_EERKS5_", fname) == 0) { return INTRN__ZNSt3__13mapC1ERKNS_3mapIT_T0_T1_T2_EERKS5_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::begin() */
  if (strcmp("_ZNSt3__13map5beginEv", fname) == 0) { return INTRN__ZNSt3__13map5beginEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::begin() */
  if (strcmp("_ZNKSt3__13map5beginEv", fname) == 0) { return INTRN__ZNKSt3__13map5beginEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::end() */
  if (strcmp("_ZNSt3__13map3endEv", fname) == 0) { return INTRN__ZNSt3__13map3endEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::end() */
  if (strcmp("_ZNKSt3__13map3endEv", fname) == 0) { return INTRN__ZNKSt3__13map3endEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::rbegin() */
  if (strcmp("_ZNSt3__13map6rbeginEv", fname) == 0) { return INTRN__ZNSt3__13map6rbeginEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::rbegin() */
  if (strcmp("_ZNKSt3__13map6rbeginEv", fname) == 0) { return INTRN__ZNKSt3__13map6rbeginEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::rend() */
  if (strcmp("_ZNSt3__13map4rendEv", fname) == 0) { return INTRN__ZNSt3__13map4rendEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::rend() */
  if (strcmp("_ZNKSt3__13map4rendEv", fname) == 0) { return INTRN__ZNKSt3__13map4rendEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::empty() */
  if (strcmp("_ZNKSt3__13map5emptyEv", fname) == 0) { return INTRN__ZNKSt3__13map5emptyEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::size() */
  if (strcmp("_ZNKSt3__13map4sizeEv", fname) == 0) { return INTRN__ZNKSt3__13map4sizeEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::max_size() */
  if (strcmp("_ZNKSt3__13map8max_sizeEv", fname) == 0) { return INTRN__ZNKSt3__13map8max_sizeEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::operator[](const std::__1::map::key_type & __k) */
  if (strcmp("_ZNSt3__13mapixERKT_", fname) == 0) { return INTRN__ZNSt3__13mapixERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::operator[](std::__1::map::key_type && __k) */
  if (strcmp("_ZNSt3__13mapixEOT_", fname) == 0) { return INTRN__ZNSt3__13mapixEOT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::get_allocator() */
  if (strcmp("_ZNKSt3__13map13get_allocatorEv", fname) == 0) { return INTRN__ZNKSt3__13map13get_allocatorEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::key_comp() */
  if (strcmp("_ZNKSt3__13map8key_compEv", fname) == 0) { return INTRN__ZNKSt3__13map8key_compEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::value_comp() */
  if (strcmp("_ZNKSt3__13map10value_compEv", fname) == 0) { return INTRN__ZNKSt3__13map10value_compEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::insert<typename _Pp, typename >(_Pp && __p) */
  if (strcmp("_ZNSt3__13map6insertEOTL0__", fname) == 0) { return INTRN__ZNSt3__13map6insertEOTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::insert<typename _Pp, typename >(std::__1::map::const_iterator __pos, _Pp && __p) */
  if (strcmp("_ZNSt3__13map6insertENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEEOTL0__", fname) == 0) { return INTRN__ZNSt3__13map6insertENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEEOTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::insert(const std::__1::map::value_type & __v) */
  if (strcmp("_ZNSt3__13map6insertERKNS_4pairIKT_T0_EE", fname) == 0) { return INTRN__ZNSt3__13map6insertERKNS_4pairIKT_T0_EE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::insert(std::__1::map::const_iterator __p, const std::__1::map::value_type & __v) */
  if (strcmp("_ZNSt3__13map6insertENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEERKNS_4pairIKS4_S5_EE", fname) == 0) { return INTRN__ZNSt3__13map6insertENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEERKNS_4pairIKS4_S5_EE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::insert(std::__1::map::value_type && __v) */
  if (strcmp("_ZNSt3__13map6insertEONS_4pairIKT_T0_EE", fname) == 0) { return INTRN__ZNSt3__13map6insertEONS_4pairIKT_T0_EE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::insert(std::__1::map::const_iterator __p, std::__1::map::value_type && __v) */
  if (strcmp("_ZNSt3__13map6insertENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEEONS_4pairIKS4_S5_EE", fname) == 0) { return INTRN__ZNSt3__13map6insertENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEEONS_4pairIKS4_S5_EE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::insert(initializer_list<std::__1::map::value_type> __il) */
  if (strcmp("_ZNSt3__13map6insertESt16initializer_listINS_4pairIKT_T0_EEE", fname) == 0) { return INTRN__ZNSt3__13map6insertESt16initializer_listINS_4pairIKT_T0_EEE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::insert<typename _InputIterator>(_InputIterator __f, _InputIterator __l) */
  if (strcmp("_ZNSt3__13map6insertETL0__S1_", fname) == 0) { return INTRN__ZNSt3__13map6insertETL0__S1_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::erase(std::__1::map::const_iterator __p) */
  if (strcmp("_ZNSt3__13map5eraseENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEE", fname) == 0) { return INTRN__ZNSt3__13map5eraseENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::erase(std::__1::map::iterator __p) */
  if (strcmp("_ZNSt3__13map5eraseENS_14__map_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE8iteratorEEE", fname) == 0) { return INTRN__ZNSt3__13map5eraseENS_14__map_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE8iteratorEEE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::erase(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNSt3__13map5eraseERKT_", fname) == 0) { return INTRN__ZNSt3__13map5eraseERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::erase(std::__1::map::const_iterator __f, std::__1::map::const_iterator __l) */
  if (strcmp("_ZNSt3__13map5eraseENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEESI_", fname) == 0) { return INTRN__ZNSt3__13map5eraseENS_20__map_const_iteratorINS_6__treeINS_12__value_typeIT_T0_EENS_19__map_value_compareIS4_S6_T1_Xaasr8is_emptyIS8_EE5valuentsr17__libcpp_is_finalIS8_EE5valueEEENS_21__rebind_alloc_helperINS_16allocator_traitsIT2_EES6_E4typeEE14const_iteratorEEESI_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::clear() */
  if (strcmp("_ZNSt3__13map5clearEv", fname) == 0) { return INTRN__ZNSt3__13map5clearEv; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::swap(map<_Key, _Tp, _Compare, _Allocator> & __m) */
  if (strcmp("_ZNSt3__13map4swapERNS_3mapIT_T0_T1_T2_EE", fname) == 0) { return INTRN__ZNSt3__13map4swapERNS_3mapIT_T0_T1_T2_EE; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::find(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNSt3__13map4findERKT_", fname) == 0) { return INTRN__ZNSt3__13map4findERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::find(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNKSt3__13map4findERKT_", fname) == 0) { return INTRN__ZNKSt3__13map4findERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::find<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNSt3__13map4findERKTL0__", fname) == 0) { return INTRN__ZNSt3__13map4findERKTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::find<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__13map4findERKTL0__", fname) == 0) { return INTRN__ZNKSt3__13map4findERKTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::count(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNKSt3__13map5countERKT_", fname) == 0) { return INTRN__ZNKSt3__13map5countERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::count<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__13map5countERKTL0__", fname) == 0) { return INTRN__ZNKSt3__13map5countERKTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::lower_bound(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNSt3__13map11lower_boundERKT_", fname) == 0) { return INTRN__ZNSt3__13map11lower_boundERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::lower_bound(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNKSt3__13map11lower_boundERKT_", fname) == 0) { return INTRN__ZNKSt3__13map11lower_boundERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::lower_bound<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNSt3__13map11lower_boundERKTL0__", fname) == 0) { return INTRN__ZNSt3__13map11lower_boundERKTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::lower_bound<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__13map11lower_boundERKTL0__", fname) == 0) { return INTRN__ZNKSt3__13map11lower_boundERKTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::upper_bound(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNSt3__13map11upper_boundERKT_", fname) == 0) { return INTRN__ZNSt3__13map11upper_boundERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::upper_bound(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNKSt3__13map11upper_boundERKT_", fname) == 0) { return INTRN__ZNKSt3__13map11upper_boundERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::upper_bound<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNSt3__13map11upper_boundERKTL0__", fname) == 0) { return INTRN__ZNSt3__13map11upper_boundERKTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::upper_bound<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__13map11upper_boundERKTL0__", fname) == 0) { return INTRN__ZNKSt3__13map11upper_boundERKTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::equal_range(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNSt3__13map11equal_rangeERKT_", fname) == 0) { return INTRN__ZNSt3__13map11equal_rangeERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::equal_range(const std::__1::map::key_type & __k) */
  if (strcmp("_ZNKSt3__13map11equal_rangeERKT_", fname) == 0) { return INTRN__ZNKSt3__13map11equal_rangeERKT_; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::equal_range<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNSt3__13map11equal_rangeERKTL0__", fname) == 0) { return INTRN__ZNSt3__13map11equal_rangeERKTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::equal_range<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__13map11equal_rangeERKTL0__", fname) == 0) { return INTRN__ZNKSt3__13map11equal_rangeERKTL0__; }
  /* std::__1::map<typename _Key, typename _Tp, typename _Compare, typename _Allocator>::~map<_Key, _Tp, _Compare, _Allocator>() */
  if (strcmp("_ZNSt3__13mapD1Ev", fname) == 0) { return INTRN__ZNSt3__13mapD1Ev; }
/* end */
