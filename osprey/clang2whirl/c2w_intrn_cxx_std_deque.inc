/*
  Copyright (C) 2021 Xcalibyte (Shenzhen) Limited.

  This program is free software; you can redistribute it and/or modify it
  under the terms of version 2 of the GNU General Public License as
  published by the Free Software Foundation.

  This program is distributed in the hope that it would be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  Further, this software is distributed without any warranty that it is
  free of the rightful claim of any third person regarding infringement
  or the like.  Any license provided herein, whether implied or
  otherwise, applies only to this software file.  Patent licenses, if
  any, provided herein do not apply to combinations of this program with
  other software, or any other product whatsoever.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write the Free Software Foundation, Inc., 59
  Temple Place - Suite 330, Boston MA 02111-1307, USA.

  http://www.xcalibyte.com

  For more information, see:
  http://github.com/open64-compiler/open64
  http://gitee.com/open64-compiler/open64

*/


/* auto-generated intrinsics for c++ std_deque intrinsic. 2021-10-26 11:56:43 */

  /* std::__1::deque<typename _Tp, typename _Allocator>::assign(initializer_list<std::__1::deque::value_type> __il) */
  if (strcmp("_ZNSt3__15deque6assignESt16initializer_listIT_E", fname) == 0) { return INTRN__ZNSt3__15deque6assignESt16initializer_listIT_E; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::assign<typename _InputIter>(_InputIter __f, _InputIter __l, typename enable_if<__is_input_iterator<_InputIter>::value && !__is_random_access_iterator<_InputIter>::value>::type * ) */
  if (strcmp("_ZNSt3__15deque6assignETL0__S1_PNS_9enable_ifIXaasr19__is_input_iteratorIS1_EE5valuentsr27__is_random_access_iteratorIS1_EE5valueEvE4typeE", fname) == 0) { return INTRN__ZNSt3__15deque6assignETL0__S1_PNS_9enable_ifIXaasr19__is_input_iteratorIS1_EE5valuentsr27__is_random_access_iteratorIS1_EE5valueEvE4typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::assign<typename _RAIter>(_RAIter __f, _RAIter __l, typename enable_if<__is_random_access_iterator<_RAIter>::value>::type * ) */
  if (strcmp("_ZNSt3__15deque6assignETL0__S1_PNS_9enable_ifIXsr27__is_random_access_iteratorIS1_EE5valueEvE4typeE", fname) == 0) { return INTRN__ZNSt3__15deque6assignETL0__S1_PNS_9enable_ifIXsr27__is_random_access_iteratorIS1_EE5valueEvE4typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::assign(std::__1::deque::size_type __n, const std::__1::deque::value_type & __v) */
  if (strcmp("_ZNSt3__15deque6assignENS_12__deque_baseIT_T0_E9size_typeERKS2_", fname) == 0) { return INTRN__ZNSt3__15deque6assignENS_12__deque_baseIT_T0_E9size_typeERKS2_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::get_allocator() */
  if (strcmp("_ZNKSt3__15deque13get_allocatorEv", fname) == 0) { return INTRN__ZNKSt3__15deque13get_allocatorEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::begin() */
  if (strcmp("_ZNSt3__15deque5beginEv", fname) == 0) { return INTRN__ZNSt3__15deque5beginEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::begin() */
  if (strcmp("_ZNKSt3__15deque5beginEv", fname) == 0) { return INTRN__ZNKSt3__15deque5beginEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::end() */
  if (strcmp("_ZNSt3__15deque3endEv", fname) == 0) { return INTRN__ZNSt3__15deque3endEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::end() */
  if (strcmp("_ZNKSt3__15deque3endEv", fname) == 0) { return INTRN__ZNKSt3__15deque3endEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::rbegin() */
  if (strcmp("_ZNSt3__15deque6rbeginEv", fname) == 0) { return INTRN__ZNSt3__15deque6rbeginEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::rbegin() */
  if (strcmp("_ZNKSt3__15deque6rbeginEv", fname) == 0) { return INTRN__ZNKSt3__15deque6rbeginEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::rend() */
  if (strcmp("_ZNSt3__15deque4rendEv", fname) == 0) { return INTRN__ZNSt3__15deque4rendEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::rend() */
  if (strcmp("_ZNKSt3__15deque4rendEv", fname) == 0) { return INTRN__ZNKSt3__15deque4rendEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::size() */
  if (strcmp("_ZNKSt3__15deque4sizeEv", fname) == 0) { return INTRN__ZNKSt3__15deque4sizeEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::max_size() */
  if (strcmp("_ZNKSt3__15deque8max_sizeEv", fname) == 0) { return INTRN__ZNKSt3__15deque8max_sizeEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::resize(std::__1::deque::size_type __n) */
  if (strcmp("_ZNSt3__15deque6resizeENS_12__deque_baseIT_T0_E9size_typeE", fname) == 0) { return INTRN__ZNSt3__15deque6resizeENS_12__deque_baseIT_T0_E9size_typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::resize(std::__1::deque::size_type __n, const std::__1::deque::value_type & __v) */
  if (strcmp("_ZNSt3__15deque6resizeENS_12__deque_baseIT_T0_E9size_typeERKS2_", fname) == 0) { return INTRN__ZNSt3__15deque6resizeENS_12__deque_baseIT_T0_E9size_typeERKS2_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::empty() */
  if (strcmp("_ZNKSt3__15deque5emptyEv", fname) == 0) { return INTRN__ZNKSt3__15deque5emptyEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::operator[](std::__1::deque::size_type __i) */
  if (strcmp("_ZNSt3__15dequeixENS_12__deque_baseIT_T0_E9size_typeE", fname) == 0) { return INTRN__ZNSt3__15dequeixENS_12__deque_baseIT_T0_E9size_typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::operator[](std::__1::deque::size_type __i) */
  if (strcmp("_ZNKSt3__15dequeixENS_12__deque_baseIT_T0_E9size_typeE", fname) == 0) { return INTRN__ZNKSt3__15dequeixENS_12__deque_baseIT_T0_E9size_typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::at(std::__1::deque::size_type __i) */
  if (strcmp("_ZNSt3__15deque2atENS_12__deque_baseIT_T0_E9size_typeE", fname) == 0) { return INTRN__ZNSt3__15deque2atENS_12__deque_baseIT_T0_E9size_typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::at(std::__1::deque::size_type __i) */
  if (strcmp("_ZNKSt3__15deque2atENS_12__deque_baseIT_T0_E9size_typeE", fname) == 0) { return INTRN__ZNKSt3__15deque2atENS_12__deque_baseIT_T0_E9size_typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::front() */
  if (strcmp("_ZNSt3__15deque5frontEv", fname) == 0) { return INTRN__ZNSt3__15deque5frontEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::front() */
  if (strcmp("_ZNKSt3__15deque5frontEv", fname) == 0) { return INTRN__ZNKSt3__15deque5frontEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::back() */
  if (strcmp("_ZNSt3__15deque4backEv", fname) == 0) { return INTRN__ZNSt3__15deque4backEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::back() */
  if (strcmp("_ZNKSt3__15deque4backEv", fname) == 0) { return INTRN__ZNKSt3__15deque4backEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::push_front(const std::__1::deque::value_type & __v) */
  if (strcmp("_ZNSt3__15deque10push_frontERKT_", fname) == 0) { return INTRN__ZNSt3__15deque10push_frontERKT_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::push_back(const std::__1::deque::value_type & __v) */
  if (strcmp("_ZNSt3__15deque9push_backERKT_", fname) == 0) { return INTRN__ZNSt3__15deque9push_backERKT_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::push_front(std::__1::deque::value_type && __v) */
  if (strcmp("_ZNSt3__15deque10push_frontEOT_", fname) == 0) { return INTRN__ZNSt3__15deque10push_frontEOT_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::push_back(std::__1::deque::value_type && __v) */
  if (strcmp("_ZNSt3__15deque9push_backEOT_", fname) == 0) { return INTRN__ZNSt3__15deque9push_backEOT_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::insert(std::__1::deque::const_iterator __p, std::__1::deque::value_type && __v) */
  if (strcmp("_ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorEOS2_", fname) == 0) { return INTRN__ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorEOS2_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::insert(std::__1::deque::const_iterator __p, initializer_list<std::__1::deque::value_type> __il) */
  if (strcmp("_ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorESt16initializer_listIS2_E", fname) == 0) { return INTRN__ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorESt16initializer_listIS2_E; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::insert(std::__1::deque::const_iterator __p, const std::__1::deque::value_type & __v) */
  if (strcmp("_ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorERKS2_", fname) == 0) { return INTRN__ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorERKS2_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::insert(std::__1::deque::const_iterator __p, std::__1::deque::size_type __n, const std::__1::deque::value_type & __v) */
  if (strcmp("_ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorENS4_9size_typeERKS2_", fname) == 0) { return INTRN__ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorENS4_9size_typeERKS2_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::insert<typename _InputIter>(std::__1::deque::const_iterator __p, _InputIter __f, _InputIter __l, typename enable_if<__is_input_iterator<_InputIter>::value && !__is_forward_iterator<_InputIter>::value>::type * ) */
  if (strcmp("_ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorETL0__S6_PNS_9enable_ifIXaasr19__is_input_iteratorIS6_EE5valuentsr21__is_forward_iteratorIS6_EE5valueEvE4typeE", fname) == 0) { return INTRN__ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorETL0__S6_PNS_9enable_ifIXaasr19__is_input_iteratorIS6_EE5valuentsr21__is_forward_iteratorIS6_EE5valueEvE4typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::insert<typename _ForwardIterator>(std::__1::deque::const_iterator __p, _ForwardIterator __f, _ForwardIterator __l, typename enable_if<__is_forward_iterator<_ForwardIterator>::value && !__is_bidirectional_iterator<_ForwardIterator>::value>::type * ) */
  if (strcmp("_ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorETL0__S6_PNS_9enable_ifIXaasr21__is_forward_iteratorIS6_EE5valuentsr27__is_bidirectional_iteratorIS6_EE5valueEvE4typeE", fname) == 0) { return INTRN__ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorETL0__S6_PNS_9enable_ifIXaasr21__is_forward_iteratorIS6_EE5valuentsr27__is_bidirectional_iteratorIS6_EE5valueEvE4typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::insert<typename _BiIter>(std::__1::deque::const_iterator __p, _BiIter __f, _BiIter __l, typename enable_if<__is_bidirectional_iterator<_BiIter>::value>::type * ) */
  if (strcmp("_ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorETL0__S6_PNS_9enable_ifIXsr27__is_bidirectional_iteratorIS6_EE5valueEvE4typeE", fname) == 0) { return INTRN__ZNSt3__15deque6insertENS_12__deque_baseIT_T0_E14const_iteratorETL0__S6_PNS_9enable_ifIXsr27__is_bidirectional_iteratorIS6_EE5valueEvE4typeE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::pop_front() */
  if (strcmp("_ZNSt3__15deque9pop_frontEv", fname) == 0) { return INTRN__ZNSt3__15deque9pop_frontEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::pop_back() */
  if (strcmp("_ZNSt3__15deque8pop_backEv", fname) == 0) { return INTRN__ZNSt3__15deque8pop_backEv; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::erase(std::__1::deque::const_iterator __p) */
  if (strcmp("_ZNSt3__15deque5eraseENS_12__deque_baseIT_T0_E14const_iteratorE", fname) == 0) { return INTRN__ZNSt3__15deque5eraseENS_12__deque_baseIT_T0_E14const_iteratorE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::erase(std::__1::deque::const_iterator __f, std::__1::deque::const_iterator __l) */
  if (strcmp("_ZNSt3__15deque5eraseENS_12__deque_baseIT_T0_E14const_iteratorES5_", fname) == 0) { return INTRN__ZNSt3__15deque5eraseENS_12__deque_baseIT_T0_E14const_iteratorES5_; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::swap(deque<_Tp, _Allocator> & __c) */
  if (strcmp("_ZNSt3__15deque4swapERNS_5dequeIT_T0_EE", fname) == 0) { return INTRN__ZNSt3__15deque4swapERNS_5dequeIT_T0_EE; }
  /* std::__1::deque<typename _Tp, typename _Allocator>::clear() */
  if (strcmp("_ZNSt3__15deque5clearEv", fname) == 0) { return INTRN__ZNSt3__15deque5clearEv; }
/* end */
