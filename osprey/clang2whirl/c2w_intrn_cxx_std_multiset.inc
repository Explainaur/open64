/*
  Copyright (C) 2021 Xcalibyte (Shenzhen) Limited.

  This program is free software; you can redistribute it and/or modify it
  under the terms of version 2 of the GNU General Public License as
  published by the Free Software Foundation.

  This program is distributed in the hope that it would be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

  Further, this software is distributed without any warranty that it is
  free of the rightful claim of any third person regarding infringement
  or the like.  Any license provided herein, whether implied or
  otherwise, applies only to this software file.  Patent licenses, if
  any, provided herein do not apply to combinations of this program with
  other software, or any other product whatsoever.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write the Free Software Foundation, Inc., 59
  Temple Place - Suite 330, Boston MA 02111-1307, USA.

  http://www.xcalibyte.com

  For more information, see:
  http://github.com/open64-compiler/open64
  http://gitee.com/open64-compiler/open64

*/


/* auto-generated intrinsics for c++ std_multiset intrinsic. 2021-10-26 11:56:57 */

  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::begin() */
  if (strcmp("_ZNSt3__18multiset5beginEv", fname) == 0) { return INTRN__ZNSt3__18multiset5beginEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::begin() */
  if (strcmp("_ZNKSt3__18multiset5beginEv", fname) == 0) { return INTRN__ZNKSt3__18multiset5beginEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::end() */
  if (strcmp("_ZNSt3__18multiset3endEv", fname) == 0) { return INTRN__ZNSt3__18multiset3endEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::end() */
  if (strcmp("_ZNKSt3__18multiset3endEv", fname) == 0) { return INTRN__ZNKSt3__18multiset3endEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::rbegin() */
  if (strcmp("_ZNSt3__18multiset6rbeginEv", fname) == 0) { return INTRN__ZNSt3__18multiset6rbeginEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::rbegin() */
  if (strcmp("_ZNKSt3__18multiset6rbeginEv", fname) == 0) { return INTRN__ZNKSt3__18multiset6rbeginEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::rend() */
  if (strcmp("_ZNSt3__18multiset4rendEv", fname) == 0) { return INTRN__ZNSt3__18multiset4rendEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::rend() */
  if (strcmp("_ZNKSt3__18multiset4rendEv", fname) == 0) { return INTRN__ZNKSt3__18multiset4rendEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::empty() */
  if (strcmp("_ZNKSt3__18multiset5emptyEv", fname) == 0) { return INTRN__ZNKSt3__18multiset5emptyEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::size() */
  if (strcmp("_ZNKSt3__18multiset4sizeEv", fname) == 0) { return INTRN__ZNKSt3__18multiset4sizeEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::max_size() */
  if (strcmp("_ZNKSt3__18multiset8max_sizeEv", fname) == 0) { return INTRN__ZNKSt3__18multiset8max_sizeEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::insert(const std::__1::multiset::value_type & __v) */
  if (strcmp("_ZNSt3__18multiset6insertERKT_", fname) == 0) { return INTRN__ZNSt3__18multiset6insertERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::insert(std::__1::multiset::const_iterator __p, const std::__1::multiset::value_type & __v) */
  if (strcmp("_ZNSt3__18multiset6insertENS_6__treeIT_T0_T1_E14const_iteratorERKS2_", fname) == 0) { return INTRN__ZNSt3__18multiset6insertENS_6__treeIT_T0_T1_E14const_iteratorERKS2_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::insert<typename _InputIterator>(_InputIterator __f, _InputIterator __l) */
  if (strcmp("_ZNSt3__18multiset6insertETL0__S1_", fname) == 0) { return INTRN__ZNSt3__18multiset6insertETL0__S1_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::insert(std::__1::multiset::value_type && __v) */
  if (strcmp("_ZNSt3__18multiset6insertEOT_", fname) == 0) { return INTRN__ZNSt3__18multiset6insertEOT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::insert(std::__1::multiset::const_iterator __p, std::__1::multiset::value_type && __v) */
  if (strcmp("_ZNSt3__18multiset6insertENS_6__treeIT_T0_T1_E14const_iteratorEOS2_", fname) == 0) { return INTRN__ZNSt3__18multiset6insertENS_6__treeIT_T0_T1_E14const_iteratorEOS2_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::insert(initializer_list<std::__1::multiset::value_type> __il) */
  if (strcmp("_ZNSt3__18multiset6insertESt16initializer_listIT_E", fname) == 0) { return INTRN__ZNSt3__18multiset6insertESt16initializer_listIT_E; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::erase(std::__1::multiset::const_iterator __p) */
  if (strcmp("_ZNSt3__18multiset5eraseENS_6__treeIT_T0_T1_E14const_iteratorE", fname) == 0) { return INTRN__ZNSt3__18multiset5eraseENS_6__treeIT_T0_T1_E14const_iteratorE; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::erase(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNSt3__18multiset5eraseERKT_", fname) == 0) { return INTRN__ZNSt3__18multiset5eraseERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::erase(std::__1::multiset::const_iterator __f, std::__1::multiset::const_iterator __l) */
  if (strcmp("_ZNSt3__18multiset5eraseENS_6__treeIT_T0_T1_E14const_iteratorES6_", fname) == 0) { return INTRN__ZNSt3__18multiset5eraseENS_6__treeIT_T0_T1_E14const_iteratorES6_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::clear() */
  if (strcmp("_ZNSt3__18multiset5clearEv", fname) == 0) { return INTRN__ZNSt3__18multiset5clearEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::swap(multiset<_Key, _Compare, _Allocator> & __s) */
  if (strcmp("_ZNSt3__18multiset4swapERNS_8multisetIT_T0_T1_EE", fname) == 0) { return INTRN__ZNSt3__18multiset4swapERNS_8multisetIT_T0_T1_EE; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::get_allocator() */
  if (strcmp("_ZNKSt3__18multiset13get_allocatorEv", fname) == 0) { return INTRN__ZNKSt3__18multiset13get_allocatorEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::key_comp() */
  if (strcmp("_ZNKSt3__18multiset8key_compEv", fname) == 0) { return INTRN__ZNKSt3__18multiset8key_compEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::value_comp() */
  if (strcmp("_ZNKSt3__18multiset10value_compEv", fname) == 0) { return INTRN__ZNKSt3__18multiset10value_compEv; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::find(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNSt3__18multiset4findERKT_", fname) == 0) { return INTRN__ZNSt3__18multiset4findERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::find(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNKSt3__18multiset4findERKT_", fname) == 0) { return INTRN__ZNKSt3__18multiset4findERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::find<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNSt3__18multiset4findERKTL0__", fname) == 0) { return INTRN__ZNSt3__18multiset4findERKTL0__; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::find<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__18multiset4findERKTL0__", fname) == 0) { return INTRN__ZNKSt3__18multiset4findERKTL0__; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::count(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNKSt3__18multiset5countERKT_", fname) == 0) { return INTRN__ZNKSt3__18multiset5countERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::count<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__18multiset5countERKTL0__", fname) == 0) { return INTRN__ZNKSt3__18multiset5countERKTL0__; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::lower_bound(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNSt3__18multiset11lower_boundERKT_", fname) == 0) { return INTRN__ZNSt3__18multiset11lower_boundERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::lower_bound(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNKSt3__18multiset11lower_boundERKT_", fname) == 0) { return INTRN__ZNKSt3__18multiset11lower_boundERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::lower_bound<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNSt3__18multiset11lower_boundERKTL0__", fname) == 0) { return INTRN__ZNSt3__18multiset11lower_boundERKTL0__; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::lower_bound<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__18multiset11lower_boundERKTL0__", fname) == 0) { return INTRN__ZNKSt3__18multiset11lower_boundERKTL0__; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::upper_bound(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNSt3__18multiset11upper_boundERKT_", fname) == 0) { return INTRN__ZNSt3__18multiset11upper_boundERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::upper_bound(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNKSt3__18multiset11upper_boundERKT_", fname) == 0) { return INTRN__ZNKSt3__18multiset11upper_boundERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::upper_bound<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNSt3__18multiset11upper_boundERKTL0__", fname) == 0) { return INTRN__ZNSt3__18multiset11upper_boundERKTL0__; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::upper_bound<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__18multiset11upper_boundERKTL0__", fname) == 0) { return INTRN__ZNKSt3__18multiset11upper_boundERKTL0__; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::equal_range(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNSt3__18multiset11equal_rangeERKT_", fname) == 0) { return INTRN__ZNSt3__18multiset11equal_rangeERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::equal_range(const std::__1::multiset::key_type & __k) */
  if (strcmp("_ZNKSt3__18multiset11equal_rangeERKT_", fname) == 0) { return INTRN__ZNKSt3__18multiset11equal_rangeERKT_; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::equal_range<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNSt3__18multiset11equal_rangeERKTL0__", fname) == 0) { return INTRN__ZNSt3__18multiset11equal_rangeERKTL0__; }
  /* std::__1::multiset<typename _Key, typename _Compare, typename _Allocator>::equal_range<typename _K2>(const _K2 & __k) */
  if (strcmp("_ZNKSt3__18multiset11equal_rangeERKTL0__", fname) == 0) { return INTRN__ZNKSt3__18multiset11equal_rangeERKTL0__; }
/* end */
